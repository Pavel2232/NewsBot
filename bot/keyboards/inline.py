from aiogram.types import InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from loguru import logger

from bot.callback_factory import MenuCallbackData, CurrencyNewsCallbackData, LikeCommentCallbackData, \
    WriteCommentCallbackData, BackCallbackData
from bot.service_async import get_all_news, get_all_me_news
from news.models import Like, Comment


def get_start_buttons() -> InlineKeyboardMarkup:
    markup = InlineKeyboardBuilder()

    markup.button(
        text='–°–º–æ—Ç—Ä–µ—Ç—å –ù–æ–≤–æ—Å—Ç–∏',
        callback_data=MenuCallbackData(
            see_news=True
        )
    )

    markup.button(
        text='–°–æ–∑–¥–∞—Ç—å –ù–æ–≤–æ—Å—Ç—å',
        callback_data=MenuCallbackData(
            create_news=True
        )
    )

    markup.button(
        text='–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ú–æ–∏ –ù–æ–≤–æ—Å—Ç–∏',
        callback_data=MenuCallbackData(
            refacto_news=True
        )
    )

    markup.adjust(1)

    return markup.as_markup()


async def get_news_buttons(
        page: int,
        news: list,
) -> InlineKeyboardMarkup:
    markup = InlineKeyboardBuilder()

    for novelty in news:
        markup.button(
            text=novelty.title,
            callback_data=CurrencyNewsCallbackData(
                id=novelty.id,
                page=page
            )
        )

    markup.adjust(1)

    return markup.as_markup()


async def comment_like_buttons(id_news: int, page: int = 0) -> InlineKeyboardMarkup:
    markup = InlineKeyboardBuilder()
    like_count: Like = await Like.objects.filter(news_id=id_news, like=True).acount()
    comment_count: Comment = await Comment.objects.filter(news_id=id_news).acount()
    markup.button(
        text=f'{like_count if like_count else ''}‚ù§Ô∏è',
        callback_data=LikeCommentCallbackData(
            id=id_news,
            like=True,
            page=page
        )
    )

    markup.button(
        text=f'{comment_count if comment_count else ''}üí¨',
        callback_data=LikeCommentCallbackData(
            id=id_news,
            comment=True,
            page=page
        )
    )

    markup.button(
        text='–ù–∞–∑–∞–¥ –∫ –Ω–æ–≤–æ—Å—Ç—è–º',
        callback_data=MenuCallbackData(
            see_news=True,
            page=page
        )
    )

    markup.adjust(2)

    return markup.as_markup()


def add_comment_buttons(id_news: int):
    markup = InlineKeyboardBuilder()

    markup.button(
        text=f'–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        callback_data=WriteCommentCallbackData()
    )

    markup.button(
        text='–ù–∞–∑–∞–¥',
        callback_data=CurrencyNewsCallbackData(
            id=id_news
        )
    )

    markup.adjust(1)

    return markup.as_markup()


def get_back_button() -> InlineKeyboardMarkup:
    markup = InlineKeyboardBuilder()

    markup.button(
        text='–ù–∞–∑–∞–¥',
        callback_data=BackCallbackData()
    )

    markup.adjust(1)

    return markup.as_markup()


def create_more_news_buttons() -> InlineKeyboardMarkup:
    markup = InlineKeyboardBuilder()

    markup.button(
        text='–°–æ–∑–¥–∞—Ç—å –µ—â—ë –Ω–æ–≤–æ—Å—Ç—å',
        callback_data=MenuCallbackData(
            create_news=True
        )
    )

    markup.button(
        text='–ù–∞–∑–∞–¥',
        callback_data=BackCallbackData()
    )

    markup.adjust(1)

    return markup.as_markup()


def refactoring_me_news(id_news: int) -> InlineKeyboardMarkup:
    markup = InlineKeyboardBuilder()

    markup.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫',
        callback_data=MenuCallbackData(
            create_news=True
        )
    )

    markup.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç',
        callback_data=MenuCallbackData(
            create_news=True
        )
    )

    markup.button(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –≤—Å—ë',
        callback_data=MenuCallbackData(
            create_news=True
        )
    )

    markup.button(
        text='–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å',
        callback_data=MenuCallbackData(
            create_news=True
        )
    )

    markup.button(
        text='–ù–∞–∑–∞–¥',
        callback_data=BackCallbackData()
    )

    markup.adjust(1)

    return markup.as_markup()
